package com.project.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.project.domain.Fluid;
import com.project.domain.Donation;

public class FluidManager implements InterfaceFluidManager{
	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableFluid = "CREATE TABLE Fluid(id bigint GENERATED BY DEFAULT AS IDENTITY, fluid_type varchar(20) unique, volume int, value int, donation_id int, FOREIGN KEY(donation_id) REFERENCES DONATION(id) ON DELETE CASCADE ON UPDATE CASCADE)";

	private PreparedStatement add_one;
	private PreparedStatement delete_all;
	private PreparedStatement delete_one;
	private PreparedStatement get_all;
	private PreparedStatement update;
	private PreparedStatement update_donation;
	private PreparedStatement set_donation;
	private PreparedStatement get_for_donation;

	private Statement statement;

	public FluidManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Fluid".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableFluid);

			add_one = connection.prepareStatement("INSERT INTO Fluid (fluid_type, volume, value, donation_id) VALUES (?,?,?,?)");
			delete_one = connection.prepareStatement("DELETE FROM Fluid WHERE fluid_type=?");
			delete_all = connection.prepareStatement("DELETE FROM Fluid");
			get_all = connection.prepareStatement("SELECT id, fluid_type, volume, value, donation_id FROM Fluid");
			update = connection.prepareStatement("UPDATE Fluid SET fluid_type=?, volume=?, value=?, donation_id=? WHERE fluid_type=?");
			update_donation = connection.prepareStatement("UPDATE Fluid SET donation_id=? WHERE fluid_type=?");
			set_donation = connection.prepareStatement("UPDATE Fluid SET donation_id=(SELECT id FROM Donation WHERE fluid_type=?) WHERE fluid_type=?;");
			get_for_donation = connection.prepareStatement("SELECT id, fluid_type, volume, value, donation_id FROM Fluid WHERE donation_id = (SELECT id FROM Donation WHERE fluid_type=?);");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}

	public void set_donation_for_fluid(Fluid fluid, String ph_fluid_type){
		try {
			set_donation.setString(1, ph_fluid_type);
			set_donation.setString(2, fluid.getFluid_type());
			System.out.println(set_donation.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public boolean add_fluid(Fluid fluid) {
		int count = 0;
		try {
			add_one.setString(1, fluid.getFluid_type());
			add_one.setInt(2, fluid.getVolume());
			add_one.setInt(3, fluid.getValue());
			add_one.setInt(4, fluid.getDonation_id());


			count = add_one.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		if(count == 1){
			return true;
		}else{
			return false;
		}
	}
	public boolean add_all_fluids(List<Fluid> fluids) {
		try {
			connection.setAutoCommit(false);

			for(Fluid fluid : fluids){
				add_one.setString(1, fluid.getFluid_type());
				add_one.setInt(2, fluid.getVolume());
				add_one.setInt(3, fluid.getValue());
				add_one.setInt(4, fluid.getDonation_id());
				add_one.executeUpdate();
			}

			connection.commit();
			connection.setAutoCommit(true);
		} catch (SQLException e) {
			try {

				connection.rollback();
				connection.setAutoCommit(true);
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}

		return false;
	}

	public int delete_fluid(Fluid fluid){
		int count = 0;
		try{
			delete_one.setString(1, fluid.getFluid_type());
			count = delete_one.executeUpdate();
		}catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public boolean update_fluid(Fluid old, Fluid new_med) {
		int count = 0;
		try {

			update.setString(1, new_med.getFluid_type());
			update.setInt(2, new_med.getVolume());
			update.setInt(3, new_med.getValue());
			update.setInt(4, new_med.getDonation_id());
			update.setString(5, old.getFluid_type());

			count = update.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		if(count == 1) return true;
		else return false;
	}

	public boolean clear_fluid(Fluid fluid) {
		int count = 0;
		try{
			delete_one.setString(1, fluid.getFluid_type());
			count = delete_one.executeUpdate();
		}catch (SQLException e) {
			e.printStackTrace();
		}
		if(count ==1) return true;
		else return false;

	}
	public void clear_fluids() {
		try {
			delete_all.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public List<Fluid> get_all_fluids() {
		List<Fluid> donations = new ArrayList<Fluid>();

		try {
			ResultSet rs = get_all.executeQuery();

			while (rs.next()) {
				Fluid p = new Fluid();
				p.setId(rs.getInt("id"));
				p.setFluid_type(rs.getString("fluid_type"));
				p.setVolume(rs.getInt("volume"));
				p.setValue(rs.getInt("value"));
				p.setDonation_id(rs.getInt("donation_id"));
				donations.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return donations;
	}

	public List<Fluid> get_all_fluids_for_donation(String fluid_type) {
		List<Fluid> fluids = new ArrayList<Fluid>();

		try {
			get_for_donation.setString(1, fluid_type);
			ResultSet rs = get_for_donation.executeQuery();

			while (rs.next()) {
				Fluid m = new Fluid();
				m.setFluid_type(rs.getString("fluid_type"));
				m.setVolume(rs.getInt("volume"));
				m.setValue(rs.getInt("value"));
				m.setDonation_id(rs.getInt("donation_id"));
				fluids.add(m);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return fluids;
	}

}
